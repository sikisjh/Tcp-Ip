#include "..\Common.h"
#include <stdio.h>
#include <stdlib.h>
#include <winsock2.h>
#include <windows.h>

#define PORT 9000
#define MAX_CLIENTS 10
#define BUFSIZE 512

void aaa(SOCKET* clientSockets, int numClients, const char* message) {
    int i;
    for (i = 0; i < numClients; ++i) {
        send(clientSockets[i], message, strlen(message), 0);
    }
}

void handleNewClient(SOCKET newClientSocket, SOCKET* clientSockets, int* numClients) {
    const char* START_STRING = "채팅 서버에 연결됨\n";
    if (*numClients < MAX_CLIENTS) {
        clientSockets[*numClients] = newClientSocket;
        (*numClients)++;
        send(newClientSocket, START_STRING, strlen(START_STRING), 0);

        // 추가한 클라이언트에게 환영 메시지를 보내기 위해 aaa 함수 호출
        aaa(clientSockets, *numClients, "환영합니다!");
    }
    else {
        printf("최대 클라이언트 수를 초과하여 연결을 거부합니다.\n");
        closesocket(newClientSocket);
    }
}

void handleClient(void* arg) {
    SOCKET clientSocket = *(SOCKET*)arg;
    char recvBuf[BUFSIZE];
    int bytesReceived;
    

    // 클라이언트 연결됨을 알림
    printf("클라이언트가 연결되었습니다. 현재 클라이언트 수: %d\n", clientSocket);

    while (1) {
        bytesReceived = recv(clientSocket, recvBuf, BUFSIZE - 1, 0);
        if (bytesReceived > 0) {
            recvBuf[bytesReceived] = '\0';

        }
        else {
            clientSocket--;
            printf("클라이언트와의 연결이 끊겼습니다.현재 클라이언트 수: %d\n", clientSocket);
            break;
        }
    }
    closesocket(clientSocket); // 클라이언트 소켓 닫기
}

int main() {
    WSADATA wsaData;
    SOCKET listenSocket, clientSocket;
    struct sockaddr_in serverAddr;
    int retval;
    int numClients = 0;
    SOCKET clientSockets[MAX_CLIENTS];

    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
        printf("Winsock 초기화 실패\n");
        return 1;
    }

    listenSocket = socket(AF_INET, SOCK_STREAM, 0);
    if (listenSocket == INVALID_SOCKET) {
        printf("소켓 생성 실패\n");
        WSACleanup();
        return 1;
    }

    serverAddr.sin_family = AF_INET;
    serverAddr.sin_addr.s_addr = htonl(INADDR_ANY);
    serverAddr.sin_port = htons(PORT);

    retval = bind(listenSocket, (struct sockaddr*)&serverAddr, sizeof(serverAddr));
    if (retval == SOCKET_ERROR) {
        printf("바인딩 실패\n");
        closesocket(listenSocket);
        WSACleanup();
        return 1;
    }

    retval = listen(listenSocket, SOMAXCONN);
    if (retval == SOCKET_ERROR) {
        printf("대기열 설정 실패\n");
        closesocket(listenSocket);
        WSACleanup();
        return 1;
    }

    while (1) {
        if (numClients < MAX_CLIENTS) {
            clientSocket = accept(listenSocket, NULL, NULL);
            if (clientSocket == INVALID_SOCKET) {
                printf("연결 수락 실패\n");
                closesocket(listenSocket);
                WSACleanup();
                return 1;
            }

            // numClients 값을 handleClient 함수로 전달하며 스레드 생성
            HANDLE clientThread = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)handleClient, (LPVOID)&clientSocket, 0, NULL);
            CloseHandle(clientThread);

            handleNewClient(clientSocket);
        }
    }

    closesocket(listenSocket);
    WSACleanup();

    return 0;
}
